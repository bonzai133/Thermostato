const temperatureRefreshTime=10000;var temperature;var unit;var tempContainer;var mode;var pump;var formConfig;window.addEventListener('load',onLoad);function onLoad(event){initTime();initHomeStatus();initConfigForm();initAdvancedConfigForm();initConfigTimeSlots();}
function initTime(){time=document.getElementById('time');if(time!==null){updateTime();setInterval(updateTime,1000);}}
async function initConfigForm(){formConfig=document.getElementById('config-form');if(formConfig){const response=await fetch('/api/config');const data=await response.json();formConfig.elements['mode-select'].value=data.mode;formConfig.elements.Confort.value=data.confort;formConfig.elements.Deltac.value=data.deltaConfort;formConfig.elements.Eco.value=data.eco;formConfig.elements.Deltae.value=data.deltaEco;formConfig.elements.HorsGel.value=data.horsGel;formConfig.elements.Deltah.value=data.deltaHorsGel;formConfig.addEventListener('submit',async(event)=>{event.preventDefault();const mode=formConfig.elements['mode-select'].value;const confort=Number(formConfig.elements.Confort.value);const deltaConfort=Number(formConfig.elements.Deltac.value);const eco=Number(formConfig.elements.Eco.value);const deltaEco=Number(formConfig.elements.Deltae.value);const horsGel=Number(formConfig.elements.HorsGel.value);const deltaHorsGel=Number(formConfig.elements.Deltah.value);const data={mode:mode,confort:confort,deltaConfort:deltaConfort,eco:eco,deltaEco:deltaEco,horsGel:horsGel,deltaHorsGel:deltaHorsGel};try{const response=await fetch('/api/config',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify(data)});if(!response.ok){throw new Error('Configuration non appliquée !');}
alert('Configuration appliquée avec succès !');}catch(error){console.error(error);alert('Erreur indéterminée lors de la sauvegarde de la configuration !');}});}}
async function initAdvancedConfigForm(){formAdvancedConfig=document.getElementById('advanced-form');if(formAdvancedConfig){const response=await fetch('/api/advancedConfig');const data=await response.json();for(let key in data){if(data.hasOwnProperty(key)){const input=formAdvancedConfig.elements[key];if(input){input.value=data[key];}}}
formAdvancedConfig.addEventListener('submit',async(event)=>{event.preventDefault();const formData=new FormData(formAdvancedConfig);const data={};for(let[key,value]of formData.entries()){data[key]=value;}
try{const response=await fetch('/api/advancedConfig',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify(data)});if(!response.ok){throw new Error('Configuration non appliquée !');}
alert('Configuration appliquée avec succès !');}catch(error){console.error(error);alert('Erreur indéterminé lors de la sauvegarde de la configuration !');}});}}
function updateTime(){let now=new Date();let h=now.getHours();let m=now.getMinutes();let s=now.getSeconds();time.innerHTML=`${normalize(h)}:${normalize(m)}:${normalize(s)}`;}
function normalize(digit){return(digit<10?'0':'')+digit;}
function initHomeStatus(){if(document.getElementById('home-status')){temperature=document.getElementById('temperature');unit=document.getElementById('unit');tempContainer=document.getElementById('tempContainer');mode=document.getElementById('mode');pump=document.getElementById('pump');setTemperature("-");getHomeStatus();setInterval(getHomeStatus,temperatureRefreshTime);}}
function getHomeStatus(){asyncAwaitRequest('/api/homeStatus/',(rspDoc)=>{setTemperature(rspDoc.temperature);switch(rspDoc.mode){case'prog':mode.innerText="Planifié";break;case'confort':mode.innerText="Confort";break;case'eco':mode.innerText="Economique";break;case'horsgel':mode.innerText="Hors gel";break;default:mode.innerText="";break;}
pump.innerText=rspDoc.pump;});}
function setTemperature(temp){if(temp=='Error'||temp=='-'){temperature.innerText=temp;unit.style.display='none';if(!tempContainer.classList.contains('error')){tempContainer.classList.add('error');}}else{let t=Number.parseFloat(temp).toFixed(1);temperature.innerText=t;unit.style.display='inline';if(tempContainer.classList.contains('error')){tempContainer.classList.remove('error');}
}}
function deleteTimeSlot(button){button.parentNode.remove();}
function addTimeSlot(button,start="00:00",end="00:00"){const div=document.createElement('div');div.className='time-slot';div.innerHTML=`<input type="time" name="timeStart" class="edit-input" value="${start}"> <input type="time" name="timeEnd" class="edit-input" value="${end}"> <button type="button" class="delete-button" onclick="deleteTimeSlot(this)">Supprimer</button>`;button.parentNode.insertBefore(div,button);return div;}
function submitTimeSlots(){const days=['Mon','Tue','Wed','Thu','Fri','Sat','Sun'];const form=document.getElementById('timeSlotForm');const timeSlots=[];const rows=form.getElementsByTagName('tr');for(let i=1;i<days.length+1;i++){const day=days[i-1]
const times=[];for(let j=1;j<rows.length;j++){const cells=rows[j].getElementsByTagName('td');cells[i].querySelectorAll('input[name="timeStart"]').forEach((timeStartInput,index)=>{const timeEndInput=cells[i].querySelectorAll('input[name="timeEnd"]')[index];if(timeStartInput&&timeEndInput){const timeStart=timeStartInput.value;const timeEnd=timeEndInput.value;times.push({start:timeStart,end:timeEnd});}});}
timeSlots.push({day:day,times:times});}
fetch('/api/timeSlots',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({timeSlots})}).then(response=>{if(response.ok){alert('Plages horaires envoyées avec succès à l\'API.');}else{alert('Échec de l\'envoi des plages horaires à l\'API.');}}).catch(error=>{console.error('Erreur lors de l\'envoi des données à l\'API:',error);});}
async function initConfigTimeSlots(){const timeSlotForm=document.getElementById('timeSlotForm');if(timeSlotForm){const response=await fetch('/api/timeSlots');const data=await response.json();data.timeSlots.forEach(ts=>{const button=document.getElementById('button_'+ts.day);ts.times.forEach(period=>{div=addTimeSlot(button,period.start,period.end);});});}}
function asyncAwaitRequest(path,callback){(async()=>{let data="Error";try{let response=await fetch(path);data=await response.json();}catch(err){data="Error";}
typeof callback==='function'&&callback(data);})();}